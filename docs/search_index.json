<<<<<<< HEAD
[["index.html", "Analysis of Data on the Existing Coastal and Marine Protected Areas 1 Getting started and Learning R 1.1 To hand-in", " Analysis of Data on the Existing Coastal and Marine Protected Areas 1 Getting started and Learning R If you have not used R previously, you may wish to work through Chapters 1 to 10 of the Quantitative training guide, which includes instructions on how to install R on a computer. In particular, in this lab you will work with the commands for Handling data using dplyr and Making graphs in R. To learn more about the commands that we are using in this lab, we recommend you read these sections. 1.1 To hand-in You are to hand-in your R Script along with the requirements described on the assignment sheet. "],["how-to-do-the-analysis-in-r.html", "2 How to do the analysis in R 2.1 Data importation and filtering 2.2 Preparing the data for graphing 2.3 Making graphs", " 2 How to do the analysis in R 2.1 Data importation and filtering Begin by making a folder on your computer Desktop where you will work on this assignment. Visit World Database on Protected Areas and download the .csv file for protected areas in the country you are studying. Save the .csv file to the folder you made on your Desktop. You may rename the .csv file you downloaded if the preset name is complicated. I changed the file name to ecuador.csv. Open R Studio and save a new R Script. In the top menu select File &gt; New File &gt; R Script, then File &gt; Save As. Save the .R (the R Script) to the folder you made on your Desktop: It is helpful to save both this files in the same folder. You will need to install the package dplyr. See instructions for how to do so here, or type into your Console: install.packages(&quot;dplyr&quot;) Once it is installed, to use the dplyr functions you need to load the package, library(dplyr) and load your data: data1 &lt;- read.csv(file = &quot;ecuador.csv&quot;) The above two commands are essential to your analysis so you should put them in your R Script, and it should look something like this: However, you will not have selected Ecuador as your country, so your script will look slightly different (the data for Ecuador are unuseable for this exercise, so the dataset ecuador.csv is example data that are made up). In the above screenshot, you can see that I have queried head(data1) in my Console. This was to check that my data had loaded. Steps that are essential to an analysis, I add to my R Script in the Source pane, in the order that I want them to run in. When I want to check something, then I do this in my Console. See Finding your way around R Studio for an explanation of where the Source and Console panes are. Generally, my workflow is to try commands in the Console. If the commands work as I planned, then I add them to my R Script. After having added a few commands I will run my R Script to check that all the commands are working together properly. To run my R Script, I click the Source button, select Code &gt; Source from the top menu, or type source('~/Desktop/cons-biol/ecuador-example.R') in my Console (you will need to replace the code to the left with your own file names and the directory path for your computer). I will Source my code every few lines that I add to my R Script, and I will perform tests in the Console to make sure everything is working. If your data has not loaded, the most likely problem is a spelling error or problems with specifying the path to ecuador.csv. You might try: the RStudio way of importing your data, or moving ecuador.csv to your working directory. To find out your working directory type getwd() into your Console: getwd() ## [1] &quot;/Users/ahurford/Desktop/BIOL4650-marine_conservation&quot; Searching your computer for ecuador.csv to make sure it is saved in correct place, and moving it as needed (it is easiest if the folder you are working in is on your computer Desktop). Opening ecuador.csv in Excel or Numbers to check that your data download was successful. (if you do this make sure your still save the file as a .csv not .xlsx or other format). After loading the data, read through the metadata file that is downloaded as a pdf file along with the .csv file to better understand the data and what you would like to plot. Please note the correct way to cite your data: UNEP-WCMC and IUCN (2021), Protected Planet: The World Database on Protected Areas (WDPA) and World Database on Other Effective Area-based Conservation Measures (WD-OECM) [Online], October 2021, Cambridge, UK: UNEP-WCMC and IUCN. Available at: www.protectedplanet.net. You will want to do some exploration of your data. To recover the names of the columns of the data: names(data1) ## [1] &quot;TYPE&quot; &quot;WDPAID&quot; &quot;WDPA_PID&quot; &quot;PA_DEF&quot; &quot;NAME&quot; ## [6] &quot;ORIG_NAME&quot; &quot;DESIG&quot; &quot;DESIG_ENG&quot; &quot;DESIG_TYPE&quot; &quot;IUCN_CAT&quot; ## [11] &quot;INT_CRIT&quot; &quot;MARINE&quot; &quot;REP_M_AREA&quot; &quot;GIS_M_AREA&quot; &quot;REP_AREA&quot; ## [16] &quot;GIS_AREA&quot; &quot;NO_TAKE&quot; &quot;NO_TK_AREA&quot; &quot;STATUS&quot; &quot;STATUS_YR&quot; ## [21] &quot;GOV_TYPE&quot; &quot;OWN_TYPE&quot; &quot;MANG_AUTH&quot; &quot;MANG_PLAN&quot; &quot;VERIF&quot; ## [26] &quot;METADATAID&quot; &quot;SUB_LOC&quot; &quot;PARENT_ISO3&quot; &quot;ISO3&quot; &quot;SUPP_INFO&quot; ## [31] &quot;CONS_OBJ&quot; Note that names(data1) is a good command to run in the Console because we want to know the column names so that we can extract the correct column later: names(data1) would be run in the Console because it is a query rather than an essential part of the analysis. Now we will extract the MARINE column. Try this in your Console (as this is just a test): select(data1, MARINE) You need to write the column name exactly as it appears in the output of names(data1) or R will produce an error. Remember MARINE is capitalized in the data frame so be careful not to type Marine, which will come out as an error. We want to filter the data to separate protected areas identified as exclusively terrestrial from those that include marine areas. The new data created will be saved as data2. Let’s run this code in the Console: data2 &lt;- filter(data1, MARINE != 0) In the MARINE column 0 indicates that a site is not marine. The new variable data2 now contains all the rows for the marine sites because !=0 means the value is not 0, and so therefore the site is marine (a double negative!). Check your output (in your Console): head(data2) head(data2$MARINE) In particular, look at the MARINE column. Are there any 0s left in the MARINE column? No? Good, because we want the marine sites, so we do not want any 0s in the MARINE column. Now we have found a line of code that works for our analysis so we add it to our R Script: In the above screen shot you can see that after I source my full R Script, I check to see that I have filtered out the sites that are not marine. If your country doesn’t include any marine sites, you will need to choose another country. We want to compute the average size of coastal MPAs for the example Ecuador data. Unfortunately, some of the MPAs have NA instead of a reported size in the GIS_M_AREA column: which(is.na(data2$GIS_M_AREA)==&quot;TRUE&quot;) ## [1] 21 22 The result output above states that rows 21 and 22 have NA in the GIS_AREA column of data2. You can verify this by typing the following in the Console: data2$GIS_M_AREA[21] ## [1] NA Yes, indeed, row 21 of data2$GIS_M_AREA is NA. We will need to remove the NAs. If you are lucky and have no NAs in your data, you can skip this step (instead just add data3 &lt;- data2 to your R Script). The following command (entered into the Console) tells us how many NAs, we have in the GIS_M_AREA column of data2: length(which(is.na(data2$GIS_M_AREA)==&quot;TRUE&quot;)) ## [1] 2 I have 2. The command to remove the NAs is: data3 &lt;- filter(data2, !is.na(GIS_M_AREA)) Let’s check that we effectively removed the NAs from the data: head(which(is.na(data3$GIS_M_AREA)==&quot;TRUE&quot;)) length(which(is.na(data3$GIS_M_AREA)==&quot;TRUE&quot;)) Now we see that data3 is a cleaned up version of data2 that no longer contains the the NA values in the GIS_M_AREA column. We know this because when we use length() to find out how many of the values in data3$GIS_M_AREA are NA, the returned value is 0. The line of code with filter() is an essential step in the analysis so you will want to add it as the next line of code in your R Script: We can now calculate the mean and median sizes of the coastal MPAs. Let’s run this code in your Console: mean(data3$GIS_M_AREA) median(data3$GIS_M_AREA) (Note mean(data2$GIS_M_AREA) returns NA due to the NAs having not been removed in the dataframe data2) 2.2 Preparing the data for graphing Before, we can make the graphs we will need to organize the data we want to graph. First, we would like to graph the number of areas in each level of protection. To do this, we will have to group the data according to the level of protection and count the number of areas in each level of protection and saving it as data4. data4 &lt;- data3 %&gt;% group_by(IUCN_CAT) %&gt;% tally() Let’s query the result in our Console to see that this worked: data4 ## # A tibble: 3 x 2 ## IUCN_CAT n ## &lt;chr&gt; &lt;int&gt; ## 1 II 8 ## 2 III 4 ## 3 Not Reported 8 Note that for the original Ecuador data this did not work because all entries in the IUCN_CAT column were Not Reported or Not Applicable (ecuador.csv is a supplemented version of the true Ecuador data with some IUCN_CAT set to II and III). In this example, row 3 is Not Reported. We need to remove this row: data4 &lt;- data4[-3, ] Note that the minus sign indicates to remove, and now data4 has the Not Reported row (both columns) removed. If you have more than one row to be removed, you would use data4 &lt;- data4[-c(3,4,6),] where you want to remove rows 3, 4, and 6. (Note that the comma is needed outside the round bracket to indicate all columns. The rows are specified by c(3,4,6)). Here data4 appears on both the left- and righthand size of &lt;-, so the old variable data4 (containing row 3) is overwritten with the new variable data4, which has row 3 removed. Our data describing the number of areas in each level of protection is now ready as data4, but let’s clean more data to make another graph before moving on to the graphing section. You R Script should now look like this: (where the top rows of code weren’t able to fit in the screen shot, but they are the same as before) Now we would like to calculate the amount of area that is strongly protected. We can do this by grouping by the IUCN_CAT column of data3, and summing the area GIS_M_AREA for the MPAs within the group. We name the result data5. Run this command in your R Console: data5 &lt;- data3 %&gt;% group_by(IUCN_CAT) %&gt;% summarise(AREA_SUM = sum(GIS_M_AREA)) We can check the result by typing, in the Console: data5 ## # A tibble: 3 x 2 ## IUCN_CAT AREA_SUM ## &lt;chr&gt; &lt;dbl&gt; ## 1 II 125943. ## 2 III 277777. ## 3 Not Reported 2718. Note that this time, we would like to leave the categories: Not applicable, Not assigned and Not reported (Evan is this right???). If data5 looks good, you will want to add the commands that produced data5 to your R Script. If it is confusing to follow such specific instructions, and you would like to have a more general understanding of the commands, you might read Handling the data. 2.3 Making graphs In this section we will made graphs of data4 and data5. We would like to construct a histogram to graph the size-frequency distribution. We will construct a histogram without a logarithm scale first, with the function hist(). The data we need to use are data3$GIS_M_AREA which contains the areas of the marine protected areas: hist(data3$GIS_M_AREA, breaks = 50, xlab = &quot;Size of MPAs&quot;, ylab=&quot;Frequency&quot;, main = &quot;The size-frequency distribution of MPAs&quot;) # Histogram without logarithmic axis Note that the graph appears in the plot window: We can plot these results on a logarithm scale as: hist(log(data3$GIS_M_AREA), breaks = 50, xlab = &quot;x label here&quot;, ylab = &quot;y label here&quot;, main = &quot;title here&quot;) # Histogram with logarithmic axis The above command, when you have corrected the title and axis labels, you can add to your R Script. We can use a barplot to show the number of areas under each level of protection from the data contained in data4. Remember that data4 has two columns: data4 ## # A tibble: 2 x 2 ## IUCN_CAT n ## &lt;chr&gt; &lt;int&gt; ## 1 II 8 ## 2 III 4 The values of interest are in the column named n, which are the numbers associated with each level of protection. We refer to just this column using the command data4$n. The names to go on the x-axis of the barplot are data4$IUCN_CAT. Use the following code to make the bar plot and add it to your R Script: barplot(data4$n, xlab = &quot;Level of protection&quot;, ylab=&quot;Number of areas&quot;, names.arg=data4$IUCN_CAT, las=1, main=&quot;Number of areas for each level of protection&quot;) Let’s revisit the data we saved in data5. Enter into your Console: data5 ## # A tibble: 3 x 2 ## IUCN_CAT AREA_SUM ## &lt;chr&gt; &lt;dbl&gt; ## 1 II 125943. ## 2 III 277777. ## 3 Not Reported 2718. The column containing the data that we want to use for the barplot is data5$AREA_SUM which is that total area for each category. Add the following to your R Script: barplot(data5$AREA_SUM, xlab = &quot;Level of protection&quot;, ylab=&quot;Area(Amt. land and water/km^2)&quot;, names.arg=data5$IUCN_CAT, las=3, main=&quot;Area of land and water for each level of protection&quot;) The last few lines of your R Script would look like this: See here for instructions for how to export your graphs. "]]
=======
[["index.html", "Analysis of Data on the Existing Coastal and Marine Protected Areas Getting started and Learning R To hand-in", " Analysis of Data on the Existing Coastal and Marine Protected Areas Getting started and Learning R If you have not used R previously, you may wish to work through Chapters 1 to 10 of the Quantitative training guide, which includes instructions on how to install R on a computer. To hand-in EVAN: We should give the students some guidance on what they are to hand-in. Usually we might ask for a working R Script, because if just the figures are required the students can take screenshots. "],["how-to-do-the-analysis-in-r.html", "How to do the analysis in R Data importation and filtering Creating a new object Preparing the data for graphing Making graphs", " How to do the analysis in R Data importation and filtering Let’s explore the protected areas data from the World Database on Protected Areas. It is best to make a folder on your computer Desktop where you will work on this assignment (if needed, review Best Practices). Download the .csv file spreadsheet for protected areas in the country you are studying from the World Database on Protected Areas to the folder you made. You may rename the .csv file you downloaded eg. protected_areas.csv Open and save a new R Script in your folder. One of the first commands of your R Script will be to load your data. For example: data1 &lt;- read.csv(file = &quot;protected_areas.csv&quot;) When writing your R script you need to learn about using your Console versus writing your R Script in the Source pane. Please read the section Finding your way around R Studio if this is unfamiliar. When you find a command that is essential to your analysis, you should put it in your R Script. Note that the order of the commands is important: the will run top to bottom. If you just want to test out a command, then use your Console. After you find a command that works (by testing in the Console), you might want to add it to your R Script. To run all the commands in your R Script (line by line) you use the Source button (or find Source from the Code menu), or you highlight the lines to run and use the Run button. In the Console, inspect your data to check that it has loaded. For example: head(data1) We put this command in the Console because it is just to check that the data loaded correctly. It isn’t necesssary to have this command in our R Script, however, the read.csv() command from above is essential, so you definitely want that one amongst the first few lines of your R Script. After you add a few lines to your R Script, you will want to periodically run your whole R script to make sure it is working as you expect. If your data has not loaded, the most likely problem is a spelling error or problems with specifying the path to protected_areas.csv. You might try: the RStudio way of importing your data, or moving protected_areas.csv to your working directory. The working directory is the folder you created to contain your data and files. After loading the data, read through the metadata file that is downloaded as a pdf file along with the .csv file to better understand the data. Data and metadata can be found here https://www.protectedplanet.net/en/search-areas?geo_type=site You will want to do some exploration of your data. See Handling the data for how to recover the names of the columns for all the data. names(data1) ## [1] &quot;TYPE&quot; &quot;WDPAID&quot; &quot;WDPA_PID&quot; &quot;PA_DEF&quot; &quot;NAME&quot; ## [6] &quot;ORIG_NAME&quot; &quot;DESIG&quot; &quot;DESIG_ENG&quot; &quot;DESIG_TYPE&quot; &quot;IUCN_CAT&quot; ## [11] &quot;INT_CRIT&quot; &quot;MARINE&quot; &quot;REP_M_AREA&quot; &quot;GIS_M_AREA&quot; &quot;REP_AREA&quot; ## [16] &quot;GIS_AREA&quot; &quot;NO_TAKE&quot; &quot;NO_TK_AREA&quot; &quot;STATUS&quot; &quot;STATUS_YR&quot; ## [21] &quot;GOV_TYPE&quot; &quot;OWN_TYPE&quot; &quot;MANG_AUTH&quot; &quot;MANG_PLAN&quot; &quot;VERIF&quot; ## [26] &quot;METADATAID&quot; &quot;SUB_LOC&quot; &quot;PARENT_ISO3&quot; &quot;ISO3&quot; &quot;SUPP_INFO&quot; ## [31] &quot;CONS_OBJ&quot; Note that names(data1) is a good command to run in the Console because we want to know the column names so that we can extract the correct column later: names(data1) would be run in the Console because it is a query rather than an essential part of the analysis. You could also use the summary() function to run a quick statistical summary of the data frame, calculating mean, median and quartile values for continuous variables. Try this in the Console: summary(data1) Again, summary(data1) is a query - to check that our data looks okay, so we opt to run it in the Console rather than adding it to our R Script. To extract a column of the data, see Handling the data. You may use either Approach 1: dplyr or Approach 2: base R. Generally, the dplyr commands tend to be simpler, however, it is good to also know the base R commands. You need only choose 1 approach. We recommend Approach 1: dplyr, unless you have prior experience with base R and prefer to do the analysis that way. Approach 1: dplyr If you have not installed the dplyr package you will need to install it. Please read install. Once it is installed, to use the dplyr functions you need to load the package: library(dplyr) This command is essential, and generally we would put it as one of the first commands in our R Script. Now we select the MARINE column, with the command: select(data1, MARINE) The output of select(data1, MARINE) is a data frame because the variable has an associated name. Approach 2: Base R To view the MARINE, column of the data in the Console, try: data1$MARINE Be sure to type exactly MARINE after the $. You need to write the column name exactly as it appears in the output of names(data1) or RStudio will produce an error. Remember MARINE is capitalized in the data frame so be careful not to type Marine which will come out as an error. Creating a new object This section is focused on subsetting the data that was named data1 and creating a new object to hold the processed data. We will call this data2. We want to filter the data to separate protected areas identified as exclusively terrestrial from those that include marine areas. The new data created will be saved as data2. Let’s run this code in the Console: Approach 1: dplyr data2 &lt;- filter(data1, MARINE != 0) Approach 2: base R data2 &lt;- data1[data1$MARINE!=0,] Note, the comma inside the square brackets indicates to take all columns for the rows where MARINE!=0 is TRUE. Both approaches In the MARINE column 0 indicates that a site is not marine. The new variable data2 now contains all the rows for the marine sites because !=0 means the value is not 0, and so therefore the site is marine (a double negative!). Check your output: head(data2) head(data2$MARINE) In particular, look at the MARINE column. Are there any 0s left in the MARINE column? No? Good, because we want the marine sites, so we do not want any 0s in the MARINE column. We want to compute the average size of coastal MPAs. Let’s take a look at the value of GIS_M_AREA in row 18041: data2$GIS_M_AREA[18041] ## [1] NA Oh no! The value of the column GIS_M_AREA for this row of data is NA. This means that no value was recorded. This will ruin our calculation of the average so we need to remove these NA values from the GIS_M_AREA column. Which rows are NAs? We can find out like this: head(which(is.na(data2$GIS_M_AREA)==&quot;TRUE&quot;)) ## [1] 17545 17546 17547 17548 17549 17550 length(which(is.na(data2$GIS_M_AREA)==&quot;TRUE&quot;)) ## [1] 497 where head() is used to return only the first 6 rows with NA values so as to not return a lengthy output, and length() is used to tell us there are 497 NA values in the GIS_M_AREA column. Approach 1: dyplyr Here is the command to remove the NAs as described in Handling the data: data3 &lt;- filter(data2, !is.na(GIS_M_AREA)) The above line of code is more than a query, it is an essential step in the analysis so you will want to add it to the code in your R script in the Source pane. Approach 2: base R To remove the NAs data3 &lt;- data2[!is.na(data2$GIS_M_AREA),] Both approaches Let’s check that we effectively removed the NAs from the data. head(which(is.na(data3$GIS_M_AREA)==&quot;TRUE&quot;)) length(which(is.na(data3$GIS_M_AREA)==&quot;TRUE&quot;)) Now we see that data3 is a cleaned up version of data2 that no longer contains the the NA values in the GIS_M_AREA column because when we use length() to find out how many of the values in data3$GIS_M_AREA are NA and the returned value is 0. The commands above are a query so you would run them in the Console to check that your analysis is going to plan, however, you do not need to include this in your R Script. We can now calculate the average size of the coastal MPAs. Let’s run this code: mean(data3$GIS_M_AREA) The median size of the coastal MPAs can also be found by running a similar code as follows: median(data3$GIS_M_AREA) Preparing the data for graphing Before, we can make the graphs we will need to organize the data we want to graph. First, we would like to graph the number of areas in each level of protection. To do this, we will have to group the data according to the level of protection and count the number of areas in each level of protection and saving it as data4. Approach 1: dplyr data4 &lt;- data3 %&gt;% group_by(IUCN_CAT) %&gt;% tally() Approch 2: base R data4 &lt;- aggregate(cbind(n = IUCN_CAT) ~ IUCN_CAT, data = data3, FUN = function(x){NROW(x)}) Both approaches Let’s query the result in our Console to see that this worked: data4 ## IUCN_CAT n ## 1 Ia 1539 ## 2 Ib 256 ## 3 II 731 ## 4 III 756 ## 5 IV 4872 ## 6 Not Applicable 191 ## 7 Not Assigned 1113 ## 8 Not Reported 5469 ## 9 V 1638 ## 10 VI 979 Yikes! Rows 6, 7, and 8 are Not Applicable, Not Assigned and Not Reported. We need to remove these. We delete the rows that have NAs by running this: data4 &lt;- data4[-c(6, 7, 8), ] Note that the minus sign indicates to remove. Our data describing the number of areas in each level of protection is now ready as data4, but let’s clean more data to make another graph before moving on to the graphing section. Now we would like to calculate the amount of area that is strongly protected. Approach 1: dplyr We can do this by grouping by the IUCN_CAT column of the dataset and summing the GIS_M_AREA accordingly and naming the resulting data as data5. Let’s run this code in the Console: data5 &lt;- data3 %&gt;% group_by(IUCN_CAT) %&gt;% summarise(AREA_SUM = sum(GIS_M_AREA)) Approach 2: base R data5 &lt;- aggregate(GIS_M_AREA ~ IUCN_CAT, data3, sum) Both approaches We can check the result by typing, in the Console: data5 ## # A tibble: 10 x 2 ## IUCN_CAT AREA_SUM ## &lt;chr&gt; &lt;dbl&gt; ## 1 Ia 2096610. ## 2 Ib 390707. ## 3 II 1038162. ## 4 III 121394. ## 5 IV 5188049. ## 6 Not Applicable 2761553. ## 7 Not Assigned 1506267. ## 8 Not Reported 9353197. ## 9 V 5830637. ## 10 VI 7708143. Note that this time, we would like to leave the categories: Not applicable, Not assigned and Not reported (Evan is this right???). If data5 looks good, you will want to add the commands that produced data5 to your R script in the Source window. Making graphs In this section we will made graphs of data4 and data5. You can read more on Making graphs in R. We would like to construct a histogram to graph the size-frequency distribution. We will construct a histogram without logarithm scale with the function hist(). The data we need to use are data3$GIS_M_AREA which contains the areas of the marine protected areas: hist(data3$GIS_M_AREA, breaks = 50, xlab = &quot;Size of MPAs&quot;, ylab=&quot;Frequency&quot;, main = &quot;The size-frequency distribution of MPAs&quot;) # Histogram without logarithmic axis We can plot these results on a logarithm scale as: hist(log(data3$GIS_M_AREA), breaks = 50, xlab = &quot;log of the size of MPAs&quot;, ylab = &quot;Frequency&quot;, main = &quot;Log-scale frequency disribution of MPAs&quot;) # Histogram with logarithmic axis We can use a barplot to show the number of areas under each level of protection from the data contained in data4. Remember that data4 has two columns: data4 ## IUCN_CAT n ## 1 Ia 1539 ## 2 Ib 256 ## 3 II 731 ## 4 III 756 ## 5 IV 4872 ## 9 V 1638 ## 10 VI 979 The values of interest are in the column named n, which are the numbers associated with each level of protection. We refer to just this column using the command data4$n. Use the following code to make the bar plot: barplot(data4$n, xlab = &quot;Level of protection&quot;, ylab=&quot;Number of areas&quot;, names.arg=c(&quot;Ia&quot;,&quot;Ib&quot;,&quot;II&quot;,&quot;III&quot;,&quot;IV&quot;,&quot;V&quot;,&quot;VI&quot;), las=1, main=&quot;Number of areas for each level of protection&quot;) Let’s revisits the data we saved in data5. data5 ## # A tibble: 10 x 2 ## IUCN_CAT AREA_SUM ## &lt;chr&gt; &lt;dbl&gt; ## 1 Ia 2096610. ## 2 Ib 390707. ## 3 II 1038162. ## 4 III 121394. ## 5 IV 5188049. ## 6 Not Applicable 2761553. ## 7 Not Assigned 1506267. ## 8 Not Reported 9353197. ## 9 V 5830637. ## 10 VI 7708143. The column containing the data that we want to use for the barplot is data5$AREA_SUM which is that total area for each category. The bar plot showing the areas could be plotted by adding this code to your R script: barplot(data5$AREA_SUM, xlab = &quot;Level of protection&quot;, ylab=&quot;Area(Amt. land and water/km^2)&quot;, names.arg=c(&quot;Ia&quot;,&quot;Ib&quot;,&quot;II&quot;,&quot;III&quot;,&quot;IV&quot;, &quot;NA&quot;, &quot;NA&quot;,&quot;NR&quot; ,&quot;V&quot;, &quot;VI&quot;), las=3, main=&quot;Area of land and water for each level of protection&quot;) "],["getting-started-and-learning-r-1.html", "Getting started and Learning R", " Getting started and Learning R If you have not used R previously, we recommend that you work through Chapters 1 to 10 of the Quantitative training guide, which includes instructions on how to install R on a computer. "],["how-to-do-the-analysis-in-r-1.html", "How to do the analysis in R Data importation and filtering Creating a new object Graphing the data", " How to do the analysis in R Data importation and filtering Let’s explore the protected areas data from the World Database on Protected Areas. It is best to make a folder on your computer Desktop where you will work on this assignment (if needed, review Best Practices). Download the .csv file spreadsheet for protected areas in the country you are studying from the World Database on Protected Areas to the folder you made. You may rename the .csv file you downloaded eg. protected_areas.csv Open and save a new R Script in your folder. One of the first commands of your R Script will be to load your data. For example: data1 &lt;- read.csv(file = &quot;protected_areas.csv&quot;) In the Console, inspect your data to check that it has loaded. For example: head(data1) If your data has not loaded, the most likely problem is a spelling error or problems with specifying the path to protected_areas.csv. You might try: the RStudio way of importing your data, or moving protected_areas.csv to your working directory. The working directory is the folder you created to contain your data and files. After loading the data, read through the metadata file that is downloaded as a pdf file along with the .csv file to better understand the data. Data and metadata can be found here https://www.protectedplanet.net/en/search-areas?geo_type=site We can run the following lines of code to have and understanding of what constitute the data by looking at the first six rows and the last six rows of the data. head(data1) ## TYPE WDPAID WDPA_PID PA_DEF NAME ORIG_NAME ## 1 Polygon 555564161 555564161 1 Hollis Road Hollis Road ## 2 Polygon 304827 304827 1 Wairakau Wairakau ## 3 Polygon 307492 307492 1 Waihou Forest Waihou Forest ## 4 Polygon 304829 304829 1 Wairere Falls Wairere Falls ## 5 Polygon 555564164 555564164 1 Upland Rd Upland Rd ## 6 Polygon 555564165 555564165 1 Waitioka Stream Waitioka Stream ## DESIG DESIG_ENG DESIG_TYPE IUCN_CAT INT_CRIT MARINE ## 1 Stewardship Area Stewardship Area National III Not Applicable 0 ## 2 Scenic Reserve Scenic Reserve National III Not Applicable 0 ## 3 Stewardship Area Stewardship Area National III Not Applicable 0 ## 4 Scenic Reserve Scenic Reserve National III Not Applicable 0 ## 5 Stewardship Area Stewardship Area National III Not Applicable 0 ## 6 Stewardship Area Stewardship Area National III Not Applicable 0 ## REP_M_AREA GIS_M_AREA REP_AREA GIS_AREA NO_TAKE NO_TK_AREA ## 1 0 0 0.03749808 0.03753839 Not Applicable 0 ## 2 0 0 1.31463152 1.31601536 Not Applicable 0 ## 3 0 0 0.27350461 1.13600579 Not Applicable 0 ## 4 0 0 0.90794542 0.90879505 Not Applicable 0 ## 5 0 0 0.02674732 0.02677135 Not Applicable 0 ## 6 0 0 1.06016675 1.06108057 Not Applicable 0 ## STATUS STATUS_YR GOV_TYPE OWN_TYPE ## 1 Designated 1988 Federal or national ministry or agency Not Reported ## 2 Designated 1936 Federal or national ministry or agency Not Reported ## 3 Designated 1981 Federal or national ministry or agency Not Reported ## 4 Designated 1908 Federal or national ministry or agency Not Reported ## 5 Designated 1987 Federal or national ministry or agency Not Reported ## 6 Designated 1987 Federal or national ministry or agency Not Reported ## MANG_AUTH MANG_PLAN VERIF METADATAID ## 1 Department of Conservation Not Reported State Verified 1773 ## 2 Department of Conservation Not Reported State Verified 1773 ## 3 Department of Conservation Not Reported State Verified 1773 ## 4 Department of Conservation Not Reported State Verified 1773 ## 5 Department of Conservation Not Reported State Verified 1773 ## 6 Department of Conservation Not Reported State Verified 1773 ## SUB_LOC PARENT_ISO3 ISO3 SUPP_INFO CONS_OBJ ## 1 NZ-WKO NZL NZL Not Applicable Not Applicable ## 2 NZ-WKO NZL NZL Not Applicable Not Applicable ## 3 NZ-WKO;NZ-BOP NZL NZL Not Applicable Not Applicable ## 4 NZ-WKO NZL NZL Not Applicable Not Applicable ## 5 NZ-BOP NZL NZL Not Applicable Not Applicable ## 6 NZ-BOP NZL NZL Not Applicable Not Applicable tail(data1) ## TYPE WDPAID WDPA_PID PA_DEF NAME ## 266996 Point 555621443 555621443 1 Suruga Wan-Kinsunose Kaiiki ## 266997 Point 555621444 555621444 1 Kuchiminose kaiiki ## 266998 Point 555621445 555621445 1 Yamatotai Kaiiki ## 266999 Point 555681859 555681859 1 Bamézoun ## 267000 Point 555681858 555681858 1 Orozoun ## 267001 Point 555681857 555681857 1 Têdozoun ## ORIG_NAME DESIG ## 266996 駿河湾・金洲ノ瀬海域 指定海域 ## 266997 口海之瀬海域 指定海域 ## 266998 大和堆海域 指定海域 ## 266999 Bamézoun Forêt Sacrée ## 267000 Orozoun Forêt Sacrée ## 267001 Têdozoun Forêt Sacrée ## DESIG_ENG DESIG_TYPE ## 266996 Area designated by prefecture, fishery operator group, etc. National ## 266997 Area designated by prefecture, fishery operator group, etc. National ## 266998 Area designated by prefecture, fishery operator group, etc. National ## 266999 Sacred Forest National ## 267000 Sacred Forest National ## 267001 Sacred Forest National ## IUCN_CAT INT_CRIT MARINE REP_M_AREA GIS_M_AREA REP_AREA ## 266996 VI Not Applicable 2 3050.65 NA 3050.650000 ## 266997 VI Not Applicable 2 21449.78 NA 21449.780000 ## 266998 VI Not Applicable 2 12608.53 NA 12608.530000 ## 266999 II Not Applicable 0 0.00 NA 0.470000 ## 267000 II Not Applicable 0 0.00 NA 0.016100 ## 267001 II Not Applicable 0 0.00 NA 0.104136 ## GIS_AREA NO_TAKE NO_TK_AREA STATUS STATUS_YR ## 266996 NA None 0 Designated 1972 ## 266997 NA None 0 Designated 1972 ## 266998 NA None 0 Designated 1972 ## 266999 NA Not Applicable 0 Established 1915 ## 267000 NA Not Applicable 0 Established 1915 ## 267001 NA Not Applicable 0 Established 1951 ## GOV_TYPE OWN_TYPE ## 266996 Sub-national ministry or agency Not Reported ## 266997 Federal or national ministry or agency Not Reported ## 266998 Federal or national ministry or agency Not Reported ## 266999 Indigenous peoples Communal ## 267000 Indigenous peoples Communal ## 267001 Indigenous peoples Communal ## MANG_AUTH MANG_PLAN ## 266996 Shizuoka Prefecture Not Reported ## 266997 Ministry of Agriculture, Forestry and Fisheries Not Reported ## 266998 Ministry of Agriculture, Forestry and Fisheries Not Reported ## 266999 Local management committee Bamézoun Not Reported ## 267000 Local management committee Not Reported ## 267001 Local management committee Not Reported ## VERIF METADATAID SUB_LOC PARENT_ISO3 ISO3 SUPP_INFO ## 266996 State Verified 1886 JP-22 JPN JPN Not Applicable ## 266997 State Verified 1886 Not Reported JPN JPN Not Applicable ## 266998 State Verified 1886 Not Reported JPN JPN Not Applicable ## 266999 Expert Verified 1980 Not Reported BEN BEN Not Applicable ## 267000 Expert Verified 1980 Not Reported BEN BEN Not Applicable ## 267001 Expert Verified 1980 Not Reported BEN BEN Not Applicable ## CONS_OBJ ## 266996 Not Applicable ## 266997 Not Applicable ## 266998 Not Applicable ## 266999 Not Applicable ## 267000 Not Applicable ## 267001 Not Applicable You will want to do some exploration of your data. See Handling the data for how to recover the names of the columns for all the data. names(data1) ## [1] &quot;TYPE&quot; &quot;WDPAID&quot; &quot;WDPA_PID&quot; &quot;PA_DEF&quot; &quot;NAME&quot; ## [6] &quot;ORIG_NAME&quot; &quot;DESIG&quot; &quot;DESIG_ENG&quot; &quot;DESIG_TYPE&quot; &quot;IUCN_CAT&quot; ## [11] &quot;INT_CRIT&quot; &quot;MARINE&quot; &quot;REP_M_AREA&quot; &quot;GIS_M_AREA&quot; &quot;REP_AREA&quot; ## [16] &quot;GIS_AREA&quot; &quot;NO_TAKE&quot; &quot;NO_TK_AREA&quot; &quot;STATUS&quot; &quot;STATUS_YR&quot; ## [21] &quot;GOV_TYPE&quot; &quot;OWN_TYPE&quot; &quot;MANG_AUTH&quot; &quot;MANG_PLAN&quot; &quot;VERIF&quot; ## [26] &quot;METADATAID&quot; &quot;SUB_LOC&quot; &quot;PARENT_ISO3&quot; &quot;ISO3&quot; &quot;SUPP_INFO&quot; ## [31] &quot;CONS_OBJ&quot; You could also use the summary() function to run a quick statistical summary of the data frame, calculating mean, median and quartile values for continuous variables. Try this in the Console summary(data1) ## TYPE WDPAID WDPA_PID PA_DEF ## Length:267001 Min. : 1 Length:267001 Min. :0.0000 ## Class :character 1st Qu.: 304545 Class :character 1st Qu.:1.0000 ## Mode :character Median :555520803 Mode :character Median :1.0000 ## Mean :295996843 Mean :0.9987 ## 3rd Qu.:555608061 3rd Qu.:1.0000 ## Max. :555721471 Max. :1.0000 ## ## NAME ORIG_NAME DESIG DESIG_ENG ## Length:267001 Length:267001 Length:267001 Length:267001 ## Class :character Class :character Class :character Class :character ## Mode :character Mode :character Mode :character Mode :character ## ## ## ## ## DESIG_TYPE IUCN_CAT INT_CRIT MARINE ## Length:267001 Length:267001 Length:267001 Min. :0.00000 ## Class :character Class :character Class :character 1st Qu.:0.00000 ## Mode :character Mode :character Mode :character Median :0.00000 ## Mean :0.09198 ## 3rd Qu.:0.00000 ## Max. :2.00000 ## ## REP_M_AREA GIS_M_AREA REP_AREA ## Min. : 0.0 Min. : 0.0 Min. : 0.0 ## 1st Qu.: 0.0 1st Qu.: 0.0 1st Qu.: 0.0 ## Median : 0.0 Median : 0.0 Median : 0.4 ## Mean : 92.3 Mean : 141.9 Mean : 253.7 ## 3rd Qu.: 0.0 3rd Qu.: 0.0 3rd Qu.: 3.7 ## Max. :1968938.0 Max. :1981965.0 Max. :1968938.0 ## NA&#39;s :12268 ## GIS_AREA NO_TAKE NO_TK_AREA STATUS ## Min. : 0.0 Length:267001 Min. : 0.0 Length:267001 ## 1st Qu.: 0.1 Class :character 1st Qu.: 0.0 Class :character ## Median : 0.5 Mode :character Median : 0.0 Mode :character ## Mean : 251.7 Mean : 33.5 ## 3rd Qu.: 4.4 3rd Qu.: 0.0 ## Max. :1982029.1 Max. :1555851.0 ## NA&#39;s :12268 ## STATUS_YR GOV_TYPE OWN_TYPE MANG_AUTH ## Min. : 0 Length:267001 Length:267001 Length:267001 ## 1st Qu.:1982 Class :character Class :character Class :character ## Median :2000 Mode :character Mode :character Mode :character ## Mean :1749 ## 3rd Qu.:2008 ## Max. :2021 ## ## MANG_PLAN VERIF METADATAID SUB_LOC ## Length:267001 Length:267001 Min. : 6 Length:267001 ## Class :character Class :character 1st Qu.:1832 Class :character ## Mode :character Mode :character Median :1839 Mode :character ## Mean :1784 ## 3rd Qu.:1848 ## Max. :2012 ## ## PARENT_ISO3 ISO3 SUPP_INFO CONS_OBJ ## Length:267001 Length:267001 Length:267001 Length:267001 ## Class :character Class :character Class :character Class :character ## Mode :character Mode :character Mode :character Mode :character ## ## ## ## To extract a column of the data, see Handling the data. You may use either Approach 1: base R or Approach 2: dplyr (generally, the dplyr commands tend to be simpler, however, it is good to also know the base R commands). Approach 1: Base R To view the MARINE, column of the data in the Console, try: data1$MARINE Be sure to type exactly MARINE after the $. You need to write the column name exactly as it appear in the output of names(data1) or RStudio will produce an error. Remember MARINE is captalized in the data frame so be careful not to type Marine which will come out as an error. Approach 2: dplyr To use the dplyr functions you need to load the package (and install if you have not already done so): library(dplyr) Now we select the MARINE column, by typing in the source pane and running the code below: select(data1, MARINE) Note that the output of select(data1, MARINE) is a data frame. Creating a new object This section is focused on subsetting the dataset which was named as data1 and creating a new object to hold the processed data. We call this data2. We want to filter the data to separate protected areas identified as exclusively terrestrial from those that include marine areas. The new data created will be saved as data2. Let’s run this code in the Console and save it in the source pane: data2 &lt;- filter(data1, MARINE != 0) We want to compute the average size of coastal MPAs. Before we do this, we will need to filter the data to remove rows with null values in the REP_AREA column. Try this code in the Console data2 &lt;- filter(data2, !is.na(GIS_M_AREA)) Now we can calculate the average size of the coastal MPAs. Let’s run this code: mean(data2$GIS_M_AREA) The median size of the coastal MPAs can also be found by running a similar code as follows: median(data2$GIS_M_AREA) Graphing the data This section will give a brief overview of how to use graphs to understand some key concepts from the data which would be difficult to understand by just studying the raw data. You can read more on Making graphs in R First, we would like to graph the the number of areas in each level of protection. To do this, we will have to group the data according to the level of protection and count the number of areas in each level of protection and saving it as data3. Let’s do it by running this code in the Console data3 &lt;- data2 %&gt;% group_by(IUCN_CAT) %&gt;% tally() Now we delete the rows that has NAs by running this data3 &lt;- data3[-c(6, 7, 8), ] Now we can use a barplot to show the number of areas under each level of protection. The following code is able to do this barplot(data3$n, xlab = &quot;Level of protection&quot;, ylab=&quot;Number of areas&quot;, names.arg=c(&quot;Ia&quot;,&quot;Ib&quot;,&quot;II&quot;,&quot;III&quot;,&quot;IV&quot;,&quot;V&quot;,&quot;VI&quot;), las=1, main=&quot;Number of areas for each level of protection&quot;) Now we would like to calculate the amount of area that is strongly protected. We can do this by grouping by the IUCN_CAT column of the dataset and summing the GIS_M_AREA accordingly and naming the resulting data as data4. Let’s run this code in the Console data4 &lt;- data2 %&gt;% group_by(IUCN_CAT) %&gt;% summarise(AREA_SUM = sum(GIS_M_AREA)) The barplot showing the area allocations could be plotted by running this code in the Console barplot(data4$AREA_SUM, xlab = &quot;Level of protection&quot;, ylab=&quot;Area(Amt. land and water/km^2)&quot;, names.arg=c(&quot;Ia&quot;,&quot;Ib&quot;,&quot;II&quot;,&quot;III&quot;,&quot;IV&quot;, &quot;NA&quot;, &quot;NA&quot;,&quot;NR&quot; ,&quot;V&quot;, &quot;VI&quot;), las=3, main=&quot;Area of land and water for each level of protection&quot;) We would like to construct a histogram to graph the size-frequency distribution. Approach 1: base R First, we will construct a histogram without logarithm scale with the base R function hist. hist(data2$GIS_M_AREA, breaks = 50, xlab = &quot;Size of MPAs&quot;, ylab=&quot;Frequency&quot;, main = &quot;The size-frequency distribution of MPAs&quot;) # Histogram without logarithmic axis Next, we want to plot a logarithm scale histogram hist(log(data2$GIS_M_AREA), breaks = 50) # Histogram with logarithmic axis Approach 2: ggplot2 Install ggplot2 package using the install.packages() and Load the ggplot2 package using the library(). We plot a histogram with logarithmic axis by running the code below: library(ggplot2) ggplot(data.frame(log(data2$GIS_M_AREA)), aes(log(data2$GIS_M_AREA))) + geom_histogram(bins = 50) We can also plot with the scale_c_log10() function: ggplot(data.frame(data2$GIS_M_AREA), aes(data2$GIS_M_AREA)) + geom_histogram(color = &quot;blue&quot;, fill = &quot;green&quot;, bins = 50) + scale_x_log10() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
>>>>>>> e31e86f113159ce879830e4261452e0825b3f3ab
